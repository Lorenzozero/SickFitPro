rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Users: owner can write own profile; restrict gaming fields server-side in future
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    // Completed workouts: only owner writes/reads own
    match /completed_workouts/{docId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    // Shared workouts: only owner creates; public readable; prevent self-vote client-side + server validations
    match /shared_workouts/{shareId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // Allow updating validationData/status only through server in production (Cloud Functions)
      allow update, delete: if false;
    }

    // Validations aggregated inside shared_workouts.validationData -> updates via CF recommended
    // Rankings: read-only for clients; writes via Cloud Functions
    match /rankings/{docId} {
      allow read: if true;
      allow write: if false;
    }
  }
}
